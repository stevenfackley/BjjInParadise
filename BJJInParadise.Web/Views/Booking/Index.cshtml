@model BJJInParadise.Web.ViewModels.NewBookingViewModel
@{
    ViewBag.Title = "Booking";
    ;
}

@section styles{
   
    <style>
        #mainNav {
            background: #000 !important;
        }

        #bookingContainer {
           
        }

    </style>
 

}

<script src="//js.braintreegateway.com/web/dropin/1.11.0/js/dropin.min.js"></script>
<div class="container" id="bookingContainer">


    <div class="notice-wrapper">
        @{
            string flash = TempData["Flash"] as string;
            if (flash != null)
            {
                <div class="show notice error notice-error">
                    <span class="notice-message">@flash</span>
                </div>
            }
        }
    </div>
    <div class="wrapper">
        <div class="checkout container">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "payment-form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(x => x.UserId)
                @Html.HiddenFor(x => x.Email)
                @Html.HiddenFor(x => x.RoomOptions)
                @Html.HiddenFor(x => x.CampId)

                <section>
                    <label for="amount">
                        <div class="input-wrapper amount-wrapper">
                           Room Options: @Html.DropDownListFor(x => x.CampRoomOptionId, Model.RoomOptions, new { htmlAttributes = new { @class = "form-control", id = "amount", name = "amount" } })
                        </div>
                    </label>

                    <div class="bt-drop-in-wrapper">
                        <div id="bt-dropin"></div>
                    </div>
                </section>

                <input id="nonce" name="payment_method_nonce" type="hidden" />
                <button class="button btn btn-success" type="submit"><span>Submit</span></button>

            }
        </div>
    </div>

</div>
@section Scripts {
   
    <script type="text/javascript">



        var client_token = "@Model.ClientToken";
        var form = document.querySelector('#payment-form');

        braintree.dropin.create({
            authorization: client_token,
            container: '#bt-dropin',
            paypal: {
                flow: 'vault'
            }
        }, function (createErr, instance) {
            form.addEventListener('submit', function (event) {
                event.preventDefault();

                instance.requestPaymentMethod(function (err, payload) {
                    if (err) {
                        console.log('Error', err);
                        return;
                    }

                    // Add the nonce to the form and submit
                    document.querySelector('#nonce').value = payload.nonce;
                    form.submit();
                });
            });
        });
      
     

        function formatAsCurrency(value) {
            var formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
                // the default value for minimumFractionDigits depends on the currency
                // and is usually already 2
            });

            return formatter.format(value);
        }


    </script>
}
